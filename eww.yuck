; ======================================================================
; =====                   Variables section                       ======
; ======================================================================

;Defines where to call eww commands
(defvar eww "~/eww/target/release")
(defvar musicHovered false)
(defpoll musicPlayingStatus :interval "2s" :initial " " "~/.config/eww/bar/scripts/music_playing_status")
(deflisten currentSong :initial " Temp Song - Temp Artist" "playerctl metadata --player=spotify  --format {{title}} - {{artist}} --follow")

;Polls the system time every 10 seconds and formats it as 12 hour clock 
(defpoll time 
      :interval "10s"
      :initial "12:00"
      "date '+%I:%M %p, %A %B %d'")

; ======================================================================
; =====                   Widget section                          ======
; ======================================================================

(defwidget powerButton []
      (box 
            :class "powerButton"
            :hexpand true
            :orientation "horiztonal"
            "󰐥"))

(defwidget hardwareMonitor []
      (box
            :hexpand true
            :orientation "horizontal"
            "hwdMonitor"))
            

; (defwidget systray []
;       (box
;             :hexpand true
;             :orientation
;             "systray"))

; (defwidget music [] 
;   (eventbox :onhover "${eww} update music_reveal=true"
; 			  :onhoverlost "${eww} update music_reveal=false"
; 		(box :class "module-2" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
; 			(box :class "song_cover_art" :vexpand "false" :hexpand "false" :style "background-image: url('${cover_art}');")
; 			(button :class "song" :wrap "true" :onclick "~/.config/eww/bar/scripts/pop music" song)
; 	    (revealer :transition "slideright"
; 			      :reveal music_reveal
; 			      :duration "350ms"
;           (box :vexpand "false" :hexpand "false" :oreintation "h" 
;                     (button :class "song_btn_prev" :onclick "~/.config/eww/bar/scripts/music_info --prev" "")
; 					(button :class "song_btn_play" :onclick "~/.config/eww/bar/scripts/music_info --toggle" song_status)
; 					(button :class "song_btn_next" :onclick "~/.config/eww/bar/scripts/music_info --next" ""))))))

(defwidget musicPlayer []
      (eventbox
            :onhover "${eww} update musicHovered=true"
            :onhoverlost "${eww} update musicHovered=false"
            (box 
                  :orientation "horizontal"
                  :space-evenly false
                  (button 
                        :onclick "spotify"
                        :class "spotifyIcon"
                        "")
                  ;Current song that's playing
                  (box 
                        :class "currentSong"
                        :orientation "horizontal"
                        currentSong)
                  (revealer
                        :transition "slideup"
                        :reveal musicHovered
                        :duration "100ms"
                        (box 
                              :orientation "horizontal"
                              (button
                                    :class "musicControl"
                                    :onclick "playerctl --player=spotify previous"
                                    "󰒮")
                              (button 
                                    :class "musicControl"
                                    :onclick "playerctl --player=spotify play-pause"
                                    musicPlayingStatus)
                              (button
                                    :class "musicControl"
                                    :onclick "playerctl --player=spotify next"
                                    "󰒭"))
                        ))
      )
)

; defines the dateTime widget, which displays the current date and time
(defwidget dateTime []
      (box
            :class "dateTime"
            :orientation "horizontal"
            time))

; ;;Left, Center and Right side of panels. These are sectioned like this so that widgets can be rearranged without needing to reformat their alignment
; ;;Figure out making the boxes first and have their layout working before implementing functionality for the widgets

; ;;Left side of panel
(defwidget left []
      (box 
            :orientation "horizontal"
            :spacing 0
            :halign "start"
            (powerButton)
            (hardwareMonitor)
            ))

;Center of bar
(defwidget center []
      (box
            :orientation "horizontal"
            :spacing 5
            :halign "center"
            ;(systray)
            "systray here"))

;Right side of panel
(defwidget right []
      (box
            :orientation "horizontal"
            :spacing 2
            :halign "end"
            (musicPlayer)
            (dateTime)))

;panel widget to unify the left, center and right sections under one scss class
(defwidget panel [] 
      (box
            :class "eww_panel"
            :orientation "horizontal"
            (left)
            (center)
            (right)
            ))

; ======================================================================
; =====                   Window section                          ======
; ======================================================================

(defwindow panel
          :monitor 1
          :geometry (geometry :x "0%" :y "0%" :width "100%" :height "4.5%" :anchor "bottom center")
          :stacking "fg"
          ;:reserve (struts :distance "5.1%%" :side "bottom")
          :windowtype "dock"
          :wm-ignore true
      (panel))

